// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/collectors": {
            "get": {
                "description": "查询采集器列表",
                "tags": [
                    "Collector"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "页数",
                        "name": "PageNum",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "页大小",
                        "name": "PageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            },
            "post": {
                "description": "创建采集器",
                "tags": [
                    "Collector"
                ],
                "parameters": [
                    {
                        "description": "创建参数",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CollectorDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/collectors/{id}": {
            "delete": {
                "description": "删除采集器",
                "tags": [
                    "Collector"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "采集器ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "description": "查询项目列表",
                "tags": [
                    "Project"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "操作描述",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "开始时间",
                        "name": "start_time",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "结束时间",
                        "name": "end_time",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "页数",
                        "name": "page",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "数据条数",
                        "name": "size",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "查询用户列表",
                "tags": [
                    "User"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "操作者",
                        "name": "operator",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "操作描述",
                        "name": "description",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "开始时间",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "结束时间",
                        "name": "end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CollectorDto": {
            "type": "object",
            "required": [
                "cluster",
                "envId",
                "name",
                "planId",
                "projectId"
            ],
            "properties": {
                "alertCnt": {
                    "type": "integer"
                },
                "alertUrl": {
                    "type": "string"
                },
                "appId": {
                    "type": "integer"
                },
                "cluster": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "integer"
                },
                "envId": {
                    "type": "integer"
                },
                "envName": {
                    "type": "string"
                },
                "execCnt": {
                    "type": "integer"
                },
                "heartBeatInterval": {
                    "type": "integer"
                },
                "heartBeatUrl": {
                    "type": "string"
                },
                "metricUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "planId": {
                    "type": "integer"
                },
                "projectCode": {
                    "type": "string"
                },
                "projectId": {
                    "type": "integer"
                },
                "tokenRefreshInterval": {
                    "type": "integer"
                },
                "tokenUrl": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "127.0.0.1:8080",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "gin-demo",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
